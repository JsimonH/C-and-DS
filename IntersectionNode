/*找到两个单链表相交的起始节点
如果两个链表没有交点，返回 null.
在返回结果后，两个链表仍须保持原有的结构。
可假定整个链表结构中没有循环。
程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {
  struct ListNode *a = headA;
    struct ListNode *b = headB;
    struct ListNode *tmp = NULL;
    int len_a =0;
    int len_b =0;
    //计算链表a的长度
    while(a) {
        if (a->next) {
            a = a->next;
        } else {
            break;
        }
        len_a++;
        }
    //计算链表b的长度
    while(b) {
        if (b->next) {
            b = b->next;
        } else {
            break;
        }
        len_b++;
    }
  //调整两个链表长度
    a = headA;
    b = headB;
    if (len_a > len_b) {
        int times = len_a - len_b;
        while(times--) {
            a = a->next;
        }
    } else {
        int times = len_b - len_a;
        while(times--) {
            b = b->next;
        }
    }
    //遍历找出入口
    while (a && b) {
        if(a==b){
           tmp = a;
            break;
        }
        a = a->next;
        b = b->next;
    }
    return tmp;  
}
